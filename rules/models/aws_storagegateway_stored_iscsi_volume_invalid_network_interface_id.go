// This file generated by `generator/`. DO NOT EDIT

package models

import (
	"fmt"
	"log"
	"regexp"

	hcl "github.com/hashicorp/hcl/v2"
	"github.com/terraform-linters/tflint-plugin-sdk/tflint"
)

// AwsStoragegatewayStoredIscsiVolumeInvalidNetworkInterfaceIDRule checks the pattern is valid
type AwsStoragegatewayStoredIscsiVolumeInvalidNetworkInterfaceIDRule struct {
	resourceType  string
	attributeName string
	pattern       *regexp.Regexp
}

// NewAwsStoragegatewayStoredIscsiVolumeInvalidNetworkInterfaceIDRule returns new rule with default attributes
func NewAwsStoragegatewayStoredIscsiVolumeInvalidNetworkInterfaceIDRule() *AwsStoragegatewayStoredIscsiVolumeInvalidNetworkInterfaceIDRule {
	return &AwsStoragegatewayStoredIscsiVolumeInvalidNetworkInterfaceIDRule{
		resourceType:  "aws_storagegateway_stored_iscsi_volume",
		attributeName: "network_interface_id",
		pattern:       regexp.MustCompile(`^\A(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\z$`),
	}
}

// Name returns the rule name
func (r *AwsStoragegatewayStoredIscsiVolumeInvalidNetworkInterfaceIDRule) Name() string {
	return "aws_storagegateway_stored_iscsi_volume_invalid_network_interface_id"
}

// Enabled returns whether the rule is enabled by default
func (r *AwsStoragegatewayStoredIscsiVolumeInvalidNetworkInterfaceIDRule) Enabled() bool {
	return true
}

// Severity returns the rule severity
func (r *AwsStoragegatewayStoredIscsiVolumeInvalidNetworkInterfaceIDRule) Severity() string {
	return tflint.ERROR
}

// Link returns the rule reference link
func (r *AwsStoragegatewayStoredIscsiVolumeInvalidNetworkInterfaceIDRule) Link() string {
	return ""
}

// Check checks the pattern is valid
func (r *AwsStoragegatewayStoredIscsiVolumeInvalidNetworkInterfaceIDRule) Check(runner tflint.Runner) error {
	log.Printf("[TRACE] Check `%s` rule", r.Name())

	return runner.WalkResourceAttributes(r.resourceType, r.attributeName, func(attribute *hcl.Attribute) error {
		var val string
		err := runner.EvaluateExpr(attribute.Expr, &val, nil)

		return runner.EnsureNoError(err, func() error {
			if !r.pattern.MatchString(val) {
				runner.EmitIssueOnExpr(
					r,
					fmt.Sprintf(`"%s" does not match valid pattern %s`, truncateLongMessage(val), `^\A(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\z$`),
					attribute.Expr,
				)
			}
			return nil
		})
	})
}
