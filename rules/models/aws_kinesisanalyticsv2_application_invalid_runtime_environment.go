// This file generated by `generator/`. DO NOT EDIT

package models

import (
	"fmt"
	"log"

	hcl "github.com/hashicorp/hcl/v2"
	"github.com/terraform-linters/tflint-plugin-sdk/tflint"
)

// AwsKinesisanalyticsv2ApplicationInvalidRuntimeEnvironmentRule checks the pattern is valid
type AwsKinesisanalyticsv2ApplicationInvalidRuntimeEnvironmentRule struct {
	resourceType  string
	attributeName string
	enum          []string
}

// NewAwsKinesisanalyticsv2ApplicationInvalidRuntimeEnvironmentRule returns new rule with default attributes
func NewAwsKinesisanalyticsv2ApplicationInvalidRuntimeEnvironmentRule() *AwsKinesisanalyticsv2ApplicationInvalidRuntimeEnvironmentRule {
	return &AwsKinesisanalyticsv2ApplicationInvalidRuntimeEnvironmentRule{
		resourceType:  "aws_kinesisanalyticsv2_application",
		attributeName: "runtime_environment",
		enum: []string{
			"SQL-1_0",
			"FLINK-1_6",
			"FLINK-1_8",
			"ZEPPELIN-FLINK-1_0",
			"FLINK-1_11",
			"FLINK-1_13",
			"ZEPPELIN-FLINK-2_0",
		},
	}
}

// Name returns the rule name
func (r *AwsKinesisanalyticsv2ApplicationInvalidRuntimeEnvironmentRule) Name() string {
	return "aws_kinesisanalyticsv2_application_invalid_runtime_environment"
}

// Enabled returns whether the rule is enabled by default
func (r *AwsKinesisanalyticsv2ApplicationInvalidRuntimeEnvironmentRule) Enabled() bool {
	return true
}

// Severity returns the rule severity
func (r *AwsKinesisanalyticsv2ApplicationInvalidRuntimeEnvironmentRule) Severity() string {
	return tflint.ERROR
}

// Link returns the rule reference link
func (r *AwsKinesisanalyticsv2ApplicationInvalidRuntimeEnvironmentRule) Link() string {
	return ""
}

// Check checks the pattern is valid
func (r *AwsKinesisanalyticsv2ApplicationInvalidRuntimeEnvironmentRule) Check(runner tflint.Runner) error {
	log.Printf("[TRACE] Check `%s` rule", r.Name())

	return runner.WalkResourceAttributes(r.resourceType, r.attributeName, func(attribute *hcl.Attribute) error {
		var val string
		err := runner.EvaluateExpr(attribute.Expr, &val, nil)

		return runner.EnsureNoError(err, func() error {
			found := false
			for _, item := range r.enum {
				if item == val {
					found = true
				}
			}
			if !found {
				runner.EmitIssueOnExpr(
					r,
					fmt.Sprintf(`"%s" is an invalid value as runtime_environment`, truncateLongMessage(val)),
					attribute.Expr,
				)
			}
			return nil
		})
	})
}
